
#Kirstin's methods


class Player:
    """Creates an abstract class called Player for a player
    
    Attributes: 
    name(str): the player's name
    """
def __init__(self, name):
    self.name = name

def turn(self, state):
        """Take a turn.
        Args:
            state(GameState): a snapshot of the current state of the game.
            
        Returns:
            str: the coordinates that the player guessed
            """
        raise NotImplementedError("Subclasses implement the 'turn' method")

class HumanPlayer(Player):
    """Class for human player
    
    Attributes:
    name(str): the player's name"""
    def turn(self, state):
        """Take a turn.
        Args:
            state(GameState): a snapshot of the current state of the game.
            
        Returns:
            str: the player's guess (a letter or a word)
            """
        
        print(f"{self.name}, guess a set of coordinates of a hidden object: {state}")
        return input()

class ComputerPlayer(Player):
    """ Class for a computer player
    
    Attributes: 
        name(str): the player's name
        vocab(list of strings): words that the computer can draw from when taking turns
        """
    def __init__(self, name, grid):
      super().__init__(name)
      self.grid = grid



#play function
def play(self):
        """Play the game.
        
        Side effects:
            Writes to stdout.
            See also turn().
        """

        while self.outcome() is None:
            turn += 1
            player = self.players[turn % len(self.players)]
            if self.score[player.name] < self.objects:
                continue
            self.turn(player)
        print(self.state().board)
        outcome = self.outcome()
        if outcome == "win":
            print(f"{player.name} wins!")
        else:
            print(f"The {object} was buried at {coordinates}. Play again 
                  for another chance to find treasure!")
            
            
#Remy's Methods

def outcome(Player):
    if Player.objects.contains("Treasure"):
        return f"We have a winner! {Player} found the treasure!"
    elif Player.objects.contains("Bomb"):
        return f"Oh no, {Player} found the bomb. You lose!"
    else:
        return None